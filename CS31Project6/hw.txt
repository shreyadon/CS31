{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fmodern\fcharset0 Courier;\f2\fswiss\fcharset0 ArialMT;
}
{\colortbl;\red255\green255\blue255;\red26\green26\blue26;}
\paperw11900\paperh16840\margl1440\margr1440\vieww25400\viewh14500\viewkind0
\deftab543
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0

\f0\fs22 \cf0 \CocoaLigature0 \
\
\pard\pardeftab720\sl280\partightenfactor0

\f1\fs24 \cf0 \expnd0\expndtw0\kerning0
\CocoaLigature1 1.a.  int main()\
    \{\
        int arr[3] = \{ 5, 10, 15 \};\
        int* ptr = arr;\
\
        *ptr = 10;          // set arr[0] to 30\
        *(ptr + 1) = 20;      // set arr[1] to 20\
        ptr += 2;\
        *ptr = 30;        // set arr[2] to 10\
\
        while (ptr >= arr)\
        \{\
            cout << *ptr << endl;    // print values\
		  ptr--;\
        \}\
    \}\
1.b. Since the function updates the pointer, the pointer has to be passed by reference and NOT passed by value. Passing by value makes a copy of the object and any changes to the object are made to the copy, not the object. You can change the object that the pointer points to, but not the pointer itself if you pass by value.
\f2\fs26 \cf2 \

\f1\fs24 \cf0 \
    void findMax(int arr[], int n, int*& pToMax) // this should fix the issue.\
    \{\
        if (n <= 0) \
            return;      // no items, no maximum!\
    \
        pToMax = arr;\
\
        for (int i = 1; i < n; i++)\
        \{\
            if (arr[i] > *pToMax)\
                 pToMax = arr + i;\
        \}\
    \}       \
\
    int main()\
    \{\
        int nums[4] = \{ 5, 3, 15, 6 \};\
        int* ptr;\
\
        findMax(nums, 4, ptr);\
        cout << "The maximum is at address " << ptr << endl;\
        cout << "It's at position " << ptr - nums << endl;\
        cout << "Its value is " << *ptr << endl;\
    \}\
1.c. In the main routine, the pointer ptr is uninitialized. This leads to undefined behaviour. \
\
    void computeCube(int n, int* ncubed)\
    \{\
        *ncubed = n * n * n;\
    \}\
\
    int main()\
    \{\
        int* ptr;	\
        ptr = new int; // here we are initializing ptr to an int.\
        computeCube(5, ptr);\
        cout << "Five cubed is " << *ptr << endl;\
    \}\
1.d. In strequal, the function is not comparing the txt but instead comparing the pointers.\
It is an error to compare C-style strings (char[] or char*) with == or != between each other, because the comparison is between in the pointers and not the string. \
One way to change it is:\
     // return true if two C strings are equal\
     bool strequal(const char str1[], const char str2[])\
    \{\
        while (*str1 != 0  &&  *str2 != 0)\
        \{\
            if (*str1 != *str2)  // compare corresponding characters\
                return false;\
            str1++;            // advance to the next character\
            str2++;\
        \}\
        return *str1 == *str2;   // both ended at same time?\
    \}\
\
    int main()\
    \{\
        char a[15] = "Zhao";\
        char b[15] = "Zhou";\
\
        if (strequal(a,b))\
            cout << "They're the same person!\\n";\
    \}\
1.e. #include <iostream>\
    using namespace std;\
\
    int* getPtrToArray(int& m)\
    \{\
        int anArray[100]; // This is a local variable. That meant, it will be destroyed as soon as function ends.\
        for (int j = 0; j < 100; j++)\
            anArray[j] = 100-j;\
        m = 100;\
        return anArray; // Once the current function returns, the array will be out of scope, which in turn means that the returned pointer will be pointing to an invalid   		   location.\
    \}\
\
    void f()\
    \{\
        int junk[100];\
        for (int k = 0; k < 100; k++)\
            junk[k] = 123400000 + k;\
    \}\
\
    int main()\
    \{\
        int n;\
        int* ptr = getPtrToArray(n);\
        f();\
        for (int i = 0; i < 3; i++)\
            cout << ptr[i] << ' ';\
        for (int i = n-3; i < n; i++)\
            cout << ptr[i] << ' ';\
        cout << endl;\
    \}\
The program is trying to access out of scope pointer.\
\
2.a. double *cat;\
2.b. double mouse[5];\
2.c. cat = &mouse[0] + 4;\
2.d. *cat = 25;\
2.e. *(mouse + 3) = 42;\
2.f. cat -= 3;\
2.g. cat[1] = 54;\
2.h. cat[0] = 17;\
2.i. bool 
\f0\fs22 \kerning1\expnd0\expndtw0 \CocoaLigature0 b = (*cat == *(cat+1)); \

\f1\fs24 \expnd0\expndtw0\kerning0
\CocoaLigature1 2.j. bool 
\f0\fs22 \kerning1\expnd0\expndtw0 \CocoaLigature0 d = (*cat == mouse[0]);\
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0

\f1\fs24 \cf0 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
3.a. 
\f0\fs22 \kerning1\expnd0\expndtw0 \CocoaLigature0 double mean(const double* scores, int numScores)\
\{\
    double tot = 0;\
    for (int i = 0; i < numScores; i++)\
    \{\
        tot += *(scores + i);\
    \}\
    return tot/numScores;\
\}\
3.b. const char* findTheChar(const char *str, char chr)\
\{\
    for (int k = 0; *str != 0;k++ )\
    \{\
        if (*str != chr)\
        \{\
            str += 1;\
        \}\
        else\
        \{\
            return str;\
        \}\
    \}\
    return nullptr; // if chr is not found\
\}\
3.c.const char* findTheChar(const char *str, char chr)\
\{\
    while (*str != 0)\
    \{\
        if (*str != chr)\
        \{\
            str += 1;\
        \}\
        else\
        \{\
            return str;\
        \}\
    \}\
    return nullptr; // if chr is not found\
\}
\f1\fs24 \expnd0\expndtw0\kerning0
\CocoaLigature1 \

\f0\fs22 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
4. 
\f1\fs24 \expnd0\expndtw0\kerning0
\CocoaLigature1  #include <iostream>\
\pard\pardeftab720\sl280\partightenfactor0
\cf0     using namespace std;\
\
    int* maxwell(int* a, int* b)\
    \{\
        if (*a > *b)\
            return a;\
        else\
            return b;\
    \}\
\
    void swap1(int* a, int* b)\
    \{\
        int* temp = a;\
        a = b;\
        b = temp;\
    \}\
\
    void swap2(int* a, int* b)\
    \{\
        int temp = *a;\
        *a = *b;\
        *b = temp;\
    \}\
\
    int main()\
    \{\
        int array[6] = \{ 5, 3, 4, 17, 22, 19 \};\
\
        int* ptr = maxwell(array, &array[2]); // ptr = array\
        *ptr = -1; // array[0] = -1\
        ptr += 2; // ptr = &array[2]\
        ptr[1] = 9; // array[3] = 9\
        *(array+1) = 79; // array[1] = 79\
\
        cout << &array[5] - ptr << endl; // outputs 3 ( =(5-2) ) \
\
        swap1(&array[0], &array[1]); // Passing by value makes a copy of the object and any changes to the object are made to the copy, not the object.\
        swap2(array, &array[2]); // array[0] = 4, array[2] = -1. Such that array[6] = \{4, 79, -1, 9, 22, 19\}\
\
        for (int i = 0; i < 6; i++)\
            cout << array[i] << endl;\
    \} \
Output:\
3\
4\
79\
-1\
9\
22\
19\
\
5.void removeS(char* origStr)\
\{\
   char *tmp = origStr;\
\
   while (*origStr)\
   \{\
      if (((*origStr) != 's') && ((*origStr) != 'S'))\
      \{\
         *tmp = *origStr;\
         tmp++;\
      \}\
      origStr++;\
   \}\
   *tmp = '\\0';\
\}}